name: build

on:
  push:
    branches: [ main, deploy ]
    paths-ignore:
      - '**/*.gitattributes'
      - '**/*.gitignore'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  FORCE_COLOR: 3
  TERM: xterm
  # renovate: datasource=github-releases depName=zizmor packageName=zizmorcore/zizmor
  ZIZMOR_VERSION: '1.15.2'

permissions: {}

jobs:

  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:

    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        filter: 'tree:0'
        persist-credentials: false
        show-progress: false

    - name: Setup Node
      uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
      with:
        node-version: '24'

    - name: Get npm cache directory
      id: npm-cache-dir
      shell: pwsh
      run: |
        "dir=$(npm config get cache)" >> ${env:GITHUB_OUTPUT}

    - name: Setup npm cache
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      id: npm-cache
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-

    - name: Install packages
      run: npm ci

    - name: Install Hugo
      shell: bash
      env:
        # renovate: datasource=github-releases depName=Hugo packageName=gohugoio/hugo
        HUGO_VERSION: 'v0.151.1'
      run: |
        HUGO_FILE="hugo_extended_${HUGO_VERSION#v}_Linux-64bit.tar.gz"
        TEMP_DIR="${RUNNER_TEMP}/hugo-install"
        mkdir --parents "${TEMP_DIR}" && cd "${TEMP_DIR}"
        curl --silent --location "https://github.com/gohugoio/hugo/releases/download/${HUGO_VERSION}/${HUGO_FILE}" --output "${HUGO_FILE}"
        tar -xf "${HUGO_FILE}"
        sudo mv hugo /usr/local/bin/
        hugo version

    - name: Build blog
      shell: pwsh
      run: ./build.ps1

    - name: GZip HTML files
      shell: bash
      run: |
        find ./public -type f -name '*.html' -print0 | while IFS= read -r -d '' file; do
          gzip --stdout "${file}" > "${file}.gz"
        done

    - name: Publish blog
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: blog
        path: ./public
        if-no-files-found: error

  lint:
    runs-on: ubuntu-latest

    permissions:
      actions: read
      contents: read
      security-events: write

    steps:

    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        filter: 'tree:0'
        persist-credentials: false
        show-progress: false

    - name: Add actionlint problem matcher
      run: echo "::add-matcher::.github/actionlint-matcher.json"

    - name: Lint workflows
      uses: docker://rhysd/actionlint:1.7.8@sha256:96d4a8c87dbbfb3bdd324f8fdc285fc3df5261e2decc619a4dd7e8ee52bbfd46
      with:
        args: -color

    - name: Lint workflows with zizmor
      uses: zizmorcore/zizmor-action@e673c3917a1aef3c65c972347ed84ccd013ecda4 # v0.2.0
      with:
        persona: pedantic
        version: ${{ env.ZIZMOR_VERSION }}

    - name: Lint markdown with actionlint
      uses: DavidAnson/markdownlint-cli2-action@992badcdf24e3b8eb7e87ff9287fe931bcb00c6e # v20.0.0
      with:
        config: '.markdownlint.json'
        globs: |
          **/*.md

    - name: Lint PowerShell in workflows
      uses: martincostello/lint-actions-powershell@5942e3350ee5bd8f8933cec4e1185d13f0ea688f # v1.0.0
      with:
        treat-warnings-as-errors: true

    - name: Lint PowerShell scripts
      shell: pwsh
      run: |
        $settings = @{
          IncludeDefaultRules = $true
          Severity = @("Error", "Warning")
        }
        $issues = Invoke-ScriptAnalyzer -Path ${env:GITHUB_WORKSPACE} -Recurse -ReportSummary -Settings $settings
        foreach ($issue in $issues) {
          $severity = $issue.Severity.ToString()
          $level = $severity.Contains("Error") ? "error" : $severity.Contains("Warning") ? "warning" : "notice"
          Write-Output "::${level} file=$($issue.ScriptName),line=$($issue.Line),title=PSScriptAnalyzer::$($issue.Message)"
        }
        if ($issues.Count -gt 0) {
          exit 1
        }

  deploy:
    if: github.event.repository.fork == false && github.ref_name == 'deploy'
    runs-on: ubuntu-latest
    needs: [ build, lint ]

    environment:
      name: production
      url: https://blog.martincostello.com

    permissions:
      id-token: write

    steps:

    - name: Download blog
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        name: blog
        path: ./public

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@00943011d9042930efac3dcd3a170e4273319bc8 # v5.1.0
      with:
        role-to-assume: ${{ secrets.AWS_DEPLOYMENT_ROLE }}
        role-session-name: ${{ github.event.repository.name }}-${{ github.run_id }}-deploy
        aws-region: eu-west-2

    - name: Deploy to S3
      run: aws s3 sync ./public/ s3://blog.martincostello.com --cache-control "max-age=604800" --delete

    - name: Create CloudFront invalidation
      shell: pwsh
      env:
        DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
      run: |
        $invalidationId = aws cloudfront create-invalidation --distribution-id ${env:DISTRIBUTION_ID} --paths "/*" --output text --query "Invalidation.Id"
        aws cloudfront wait invalidation-completed --distribution-id ${env:DISTRIBUTION_ID} --id $invalidationId
